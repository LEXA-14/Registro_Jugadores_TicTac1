@page "/JuegoTablero/{partidaID:int}"

@inject JugadoresServicios jugadoresServicios
@inject PartidasServices partidasServices
@inject MovimientosServices movimientosServices
@inject JuegosServices juegosServices
@using static Registro_Jugadores_TicTac1.Services.JuegosServices
@using System.Linq.Expressions
@using Registro_Jugadores_TicTac1.Models
@using Registro_Jugadores_TicTac1.DAL
@using Registro_Jugadores_TicTac1.Services
@rendermode InteractiveServer




@*PANTALLA DE JUEGO *@
<div class="game-screen">
    <h2 class="game-status">@GameStatus</h2>

    <div class="game-board">
        @for (var i = 0; i < 9; i++)
        {
            var cellIndex = i; // Copia local para evitar problemas con el closure en el lambda
            <button class="cell @GetPlayerClass(board[cellIndex])"
            @onclick="() => HandleCellClick(cellIndex)"
            disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
                @board[cellIndex]?.ToString()
            </button>
        }
    </div>

    <button class="btn btn-secondary mt-4" @onclick="RestartGame">
        Reiniciar Juego
    </button>
</div>
}


@code {
    [Parameter] public int partidaID{ get; set; }
    //private enum PlayerType { X, O }

    private bool gameStarted;
    private PlayerType?[] board = new JuegosServices.PlayerType?[9];
    private PlayerType? winner;
    private PlayerType? _currentPlayerType = PlayerType.X;
    private PlayerType? playerTypeSelection;

    private bool esEmpate;

    private Partidas partida;
    private Jugadores jugador1;
    private Jugadores jugador2;

    protected override async Task OnInitializedAsync()
    {
        if (partidaID > 0)
        {
            partida = await partidasServices.Buscar(partidaID);

            if (partida != null)
            {
                jugador1 = await jugadoresServicios.BuscarId(partida.Jugador1Id);

                if (partida.Jugador2Id.HasValue)
                {
                    jugador2 = await jugadoresServicios.BuscarId(partida.Jugador2Id.Value);
                }
            }
        }
    }

    private string GameStatus
    {
        get
        {
            if (winner != null) return $"🏆 ¡Ganador: {winner}!";
            return esEmpate
                ? "🤝 ¡Es un empate!"
                : $"Turno de: {_currentPlayerType}";
        }
    }


    private void SelectPlayerType(PlayerType? playerType)
    {
        playerTypeSelection = playerType;
        StateHasChanged();
    }

    private void SelectPlayerX()
    {
        playerTypeSelection = PlayerType.X;
    }

    private void StartGame()
    {
        if (playerTypeSelection.HasValue)
        {
            gameStarted = true;
        }
    }

    private async Task HandleCellClick(int index)
    {
        // Ignorar si la celda está ocupada o el juego terminó
        if (board[index] != null || winner != null || esEmpate)
        {
            return;
        }

        board[index] = _currentPlayerType;



        //movimiento
        var movimiento = new Movimientos
            {
                PartidaId = partida.PartidaId,
                JugadorId = (_currentPlayerType == PlayerType.X) ? jugador1.JugadorId : jugador2.JugadorId,
                PosicionFila = index % 3,
                PosicionColumna = index % 3,
                FechaMovimiento = DateTime.Now
            };
        //guardar movimiento
        await movimientosServices.Insertar(movimiento);


        //actualizar estado del tablero
        partida.EstadoTablero = string.Join("", board.Select(p => p?.ToString() ?? "-"));

        winner = juegosServices.CheckForWinner(board);
        if (winner != null)
        {
           // Console.WriteLine(partida.PartidaId + partida.Jugador1.Nombres + partida.Jugador2.Nombres);
            if (partida != null && jugador1 != null && jugador2 != null)
            {

                await juegosServices.GameOver(partida, jugador1, jugador2, winner);
            }
            return;
        }
        esEmpate = juegosServices.esEmpate(board);

        if (esEmpate)
        {

            if (partida != null && jugador1 != null && jugador2 != null)
            {
                //Console.WriteLine(partida.PartidaId + partida.Jugador1.Nombres + partida.Jugador2.Nombres);
                await juegosServices.GameOver(partida, jugador1, jugador2, null);
            }
            return; 
        }

        // Cambiar turno
        _currentPlayerType = (_currentPlayerType == PlayerType.X) 
            ? PlayerType.O 
            : PlayerType.X;

        //actualizar turno jugador id
        partida.TurnoJugadorId=(_currentPlayerType==PlayerType.X)? jugador1.JugadorId: jugador2.JugadorId;
    }

    

    private void RestartGame()
    {
        gameStarted = false;
        playerTypeSelection = null;
        board = new PlayerType?[9];
        _currentPlayerType = PlayerType.X;
        winner = null;
        esEmpate = false;
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }
    
}


