@page "/Jugadores/Index"

@inject JugadoresServicios jugadoresServices
@inject NavigationManager navigationManager
@using Registro_Jugadores_TicTac1.Models
@rendermode InteractiveServer

<PageTitle>Registro de Jugadores de Tic Tac Toe</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header  d-flex justify-content-between align-items-center">
            <div class="card-title"></div>
            <h5 class="card-title text-center">Index de Jugadores</h5>
            <a href="/Jugadores/Create" class="btn btn-primary"><span class="bi bi-plus-square"></span>Crear</a>
        </div>

        <div class="card-body">
            @*Search and filter*@
            <div class="row mb-3">
                <div class="col-3">
                    <label>Filtro:</label>
                    <InputSelect class="form-select" @bind-value="Filtro" @onchange="AplicarFiltro">
                        <option value="">Seleccione un filtro</option>
                        <option value="JugadorId">Jugador ID</option>
                        <option value="Nombres">Nombres</option>

                    </InputSelect>
                    
                </div>
                <div class="col-4 offset-5">
                    <label >Buscar:</label>
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar"/>
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="AplicarFiltro">

                        </button>
                    </div>
                </div>
            </div>

            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Victorias</th>
                        <th>Derrotas</th>
                        <th>Empates</th>
                        <th>Opciones</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var jugador in ListaJugadores)
                    {
                        <tr>
                            <td>@jugador.JugadorId</td>
                            <td>@jugador.Nombres</td>
                            <td>@jugador.Victorias</td>
                            <td>@jugador.Derrotas</td>
                            <td>@jugador.Empates</td>
                            <td>
                                <a href="/Jugadores/Edit/@jugador.JugadorId" class="btn btn-outline-primary bi bi-pencil-square">

                                </a>
                               
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="card-footer">
            <label>Victorias: @ListaJugadores.Sum(j=>j.Victorias)    </label>
            <label>Derrotas: @ListaJugadores.Sum(j=>j.Derrotas)     </label>
            <label>Empates: @ListaJugadores.Sum(j=>j.Empates)   </label>
        </div>
    </div>
</div>

@code{
    public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaJugadores=await jugadoresServices.GetList(j=>j.JugadorId>0);
    }


    private async Task AplicarFiltro()
    {

        var jugadores = await jugadoresServices.GetList(j => true);

        if (!string.IsNullOrWhiteSpace(ValorFiltro))
        {

            if (Filtro == "JugadorId" && int.TryParse(ValorFiltro,out int id))
            {
                ListaJugadores = await jugadoresServices.GetList(j => j.JugadorId == id);
            }
            else if (Filtro == "Nombres")
            {
                ListaJugadores = await jugadoresServices.GetList(j=>j.Nombres.ToLower()==ValorFiltro.ToLower());
            }
        }
        else
        {


            ListaJugadores = jugadores;
        }
    }

    private async Task Buscar(){

    var jugadores=await jugadoresServices.GetList(j=>true);

    if(!string.IsNullOrWhiteSpace(ValorFiltro)){
    jugadores = jugadores.Where(j => j.Nombres!.ToLower().Contains(ValorFiltro.ToLower())).ToList();
    }
    ListaJugadores=jugadores;
    }
    
    private async Task EliminarJugador(int JugadorId)
    {
        var eliminado = await jugadoresServices.Eliminar(JugadorId);

        if (eliminado)
        {
           
            ListaJugadores=await jugadoresServices.GetList(j=>j.JugadorId>0);
        }
    }
}
    
    
